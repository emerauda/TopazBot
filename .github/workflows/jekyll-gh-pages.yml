name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 22.x ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies & run tests
        run: |
          npm ci
          npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: site
          config: |
            title: TopazBot
            description: RTSP Discord Music bot for TopazChat
            url: "https://emerauda.github.io"
            baseurl: "/TopazBot"
            include:
              - docs
              - README.md
            markdown: kramdown
            permalink: pretty
            plugins:
              - jekyll-github-metadata
              - jekyll-sitemap
            kramdown:
              input: GFM
              parse_block_html: true
              syntax_highlighter: rouge
              hard_wrap: false
            safe: false
            exclude:
              - node_modules
              - package.json
              - package-lock.json
              - .gitignore
              - .env.example
              - coverage
              - tests
              - src
              - dist
              - build

      # Add Mermaid support to HTML files
      - name: Add Mermaid support to HTML files
        run: |
          echo "Adding Mermaid support to HTML files..."
          echo "Injecting dark theme CSS overrides..."
          # Add Mermaid script to head section
          find site -name "*.html" -exec sed -i '/<\/head>/i\
          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mermaid/11.8.0/mermaid.min.js\"></script>\
          <script>mermaid.initialize({startOnLoad:true, theme:\"default\"});</script>' {} \;
          # Inject dark theme CSS overrides into head
          find site -name "*.html" -exec sed -i '/<\/head>/i\
          <style>\
            /* Dark theme global overrides */\
            body, .markdown-body { background-color: #0d1117 !important; color: #c9d1d9 !important; }\
            .markdown-body pre, .markdown-body code { background-color: #161b22 !important; }\
            .markdown-body table th, .markdown-body table td { background-color: #161b22 !important; }\
            img { background-color: #161b22 !important; padding: 2px; border-radius: 4px; }\
            .badge, .social-count { background-color: #21262c !important; }\
          </style>' {} \;
          # Convert mermaid code blocks to mermaid divs - handle both variations
          find site -name "*.html" -exec sed -i 's/<pre><code class="language-mermaid">/<div class="mermaid">/g' {} \;
          find site -name "*.html" -exec sed -i 's/<code class="language-mermaid">/<div class="mermaid">/g' {} \;
          find site -name "*.html" -exec sed -i 's/<\/code><\/pre>/<\/div>/g' {} \;
          find site -name "*.html" -exec sed -i 's/<\/code>/<\/div>/g' {} \;
          
          echo "Checking for mermaid content in HTML files..."
          grep -r "mermaid" site/ || echo "No mermaid content found"

      # Debug: List generated files
      - name: Debug Jekyll output
        run: |
          echo "=== Jekyll site directory structure ==="
          find site -type f -name "*.html" | head -20
          echo "=== Looking for legal pages ==="
          find site -name "*terms*" -o -name "*privacy*"

      # Prepare a combined deploy directory (_deploy) to include site + coverage
      - name: Prepare deploy directory
        run: |
          rm -rf _deploy
          mkdir -p _deploy
          cp -r site/* _deploy/
          mkdir -p _deploy/coverage
          cp -r coverage/lcov-report/* _deploy/coverage/
          
          echo "=== Current _deploy structure ==="
          find _deploy -name "*terms*" -o -name "*privacy*"
          
          # Create legal pages manually if they don't exist
          if [ ! -d _deploy/terms ] && [ ! -f _deploy/terms.html ]; then
            echo "Creating /terms manually"
            mkdir -p _deploy/terms
            if [ -f _deploy/docs/terms-of-service.html ]; then
              cp _deploy/docs/terms-of-service.html _deploy/terms/index.html
            elif [ -d _deploy/docs/terms-of-service ]; then
              cp _deploy/docs/terms-of-service/index.html _deploy/terms/index.html
            else
              echo "Warning: terms-of-service not found in expected locations"
            fi
          fi
          
          if [ ! -d _deploy/privacy ] && [ ! -f _deploy/privacy.html ]; then
            echo "Creating /privacy manually"
            mkdir -p _deploy/privacy
            if [ -f _deploy/docs/privacy-policy.html ]; then
              cp _deploy/docs/privacy-policy.html _deploy/privacy/index.html
            elif [ -d _deploy/docs/privacy-policy ]; then
              cp _deploy/docs/privacy-policy/index.html _deploy/privacy/index.html
            else
              echo "Warning: privacy-policy not found in expected locations"
            fi
          fi
          
          echo "=== Final _deploy structure ==="
          find _deploy -name "*terms*" -o -name "*privacy*"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _deploy

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Cleanup
        run: |
          rm -rf node_modules
          rm -rf coverage
          rm -rf site
          echo "Cleanup completed successfully!"
      - name: Finalize
        run: echo "Deployment to GitHub Pages completed successfully!"
      - name: Notify success
        run: echo "Deployment to GitHub Pages completed successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}